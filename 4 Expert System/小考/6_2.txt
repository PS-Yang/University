(deftemplate binary-# (multislot name)(multislot digits))
(deftemplate binary-adder (multislot name-1) (multislot name-2)(slot carry)(multislot #-1)(multislot #-2)(multislot result))

(deffacts initial  (phase input-amount)(number 0))

(defrule read
 (phase input-amount)
  =>
 (printout t "Please input the amount of binary numbers to be added:")
 (assert (amount(read))))
 
 (defrule read-error
   ?phase<-(phase input-amount)
   ?f <-(amount ?a)
   (test (or(not(integerp ?a)) (< ?a 0) ) )
   =>
   (retract ?phase ?f) 
   (printout t "Please input a positive integer!!" crlf)
   (assert (phase input-amount)))
 
 (defrule read-right
   (declare(salience -10))
   ?phase<-(phase input-amount)
   =>
   (retract ?phase)
   (assert (phase input-binary-#)))
 
(defrule input-binary
  (phase input-binary-#)
  (amount ?a)
  ?f<-(number ?n)
  (test (< ?n ?a))
  =>
  (retract ?f)
  (printout t "Please input binary number#"(+ ?n 1)":")
  (assert (number (+ ?n 1)))
  (assert (binary-# (name (+ ?n 1))(digits(explode$(readline) ) ))))
  
(defrule input-binary-error 
  (phase input-binary-#)
  ?f1<-(number ?n)
  ?f2<-(binary-# (name ?n)(digits  $? ?d1 $?))
  (test (and(neq ?d1 0) (neq ?d1 1) ))
  =>
  (retract ?f1 ?f2)
  (assert (number (- ?n 1)))
  (printout t "Input error!! Please input binary numbers!!" crlf))
  
(defrule read-right2
   (declare(salience -10))
   ?phase<-(phase input-binary-#)
   =>
   (retract ?phase)
   (assert (phase add-binary-#)))

(defrule create-adder
  (phase add-binary-#)
  ?f1 <-(binary-# (name $?n1)(digits $?d1))
  ?f2 <-(binary-# (name $?n2&~$?n1)(digits $?d2))
  =>
  (retract ?f1 ?f2) 
  (assert (binary-adder (name-1 $?n1)(name-2 $?n2)(carry 0)(#-1 $?d1)(#-2 $?d2)(result))))

;; n1跟n2都有直  
(defrule adder-1
  (phase add-binary-#)
  ?f1 <-(binary-adder (name-1 $?n1)(name-2 $?n2)(carry ?c)(#-1 $?a ?d1)(#-2 $?b ?d2)(result $?r))
  =>
  (retract ?f1)
  (assert (binary-adder (name-1 $?n1)(name-2 $?n2)(carry  (/ (+ ?c ?d1 ?d2) 2)) (#-1 $?a)(#-2 $?b)(result (mod (+ ?c ?d1 ?d2) 2)  $?r))))
 
(defrule adder-2  
  (phase add-binary-#)
  ?f1 <-(binary-adder (name-1 $?n1)(name-2 $?n2)(carry ?c)(#-1 )(#-2 $?b ?d2)(result $?r))
  (test (= (+ ?c ?d2) 2))
  =>
  (retract ?f1)
  (assert (binary-adder (name-1 $?n1)(name-2 $?n2)(carry 1)(#-1 )(#-2 $?b)(result 0 $?r))))
  
(defrule adder-5  
  (phase add-binary-#)
  ?f1 <-(binary-adder (name-1 $?n1)(name-2 $?n2)(carry ?c)(#-1 )(#-2 $?b ?d2)(result $?r))
  (test (< (+ ?c ?d2) 2))
  =>
  (retract ?f1)
  (assert (binary-adder (name-1 $?n1)(name-2 $?n2)(carry 0)(#-1 )(#-2 $?b)(result (+ ?c ?d2) $?r))))

(defrule adder-6  
  (phase add-binary-#)
  ?f1 <-(binary-adder (name-1 $?n1)(name-2 $?n2)(carry ?c)(#-1 $?a ?d1)(#-2 )(result $?r))
  (test (= (+ ?c ?d1) 2))
  =>
  (retract ?f1)
  (assert (binary-adder (name-1 $?n1)(name-2 $?n2)(carry 1)(#-1 $?a)(#-2 )(result 0 $?r))))

(defrule adder-7  
  (phase add-binary-#)
  ?f1 <-(binary-adder (name-1 $?n1)(name-2 $?n2)(carry ?c)(#-1 $?a ?d1)(#-2 )(result $?r))
  (test (< (+ ?c ?d1) 2))
  =>
  (retract ?f1)
  (assert (binary-adder (name-1 $?n1)(name-2 $?n2)(carry 0)(#-1 $?a)(#-2 )(result (+ ?c ?d1) $?r))))
  
(defrule adder-8  
  (phase add-binary-#)
  ?f1 <-(binary-adder (name-1 $?n1)(name-2 $?n2)(carry 1)(#-1 )(#-2 )(result $?r))
  =>
  (retract ?f1)
  (assert (binary-adder (name-1 $?n1)(name-2 $?n2)(carry 0)(#-1 )(#-2 )(result 1 $?r)))) 

(defrule convert-adder-to-number
  (phase add-binary-#)
  ?f1<-(binary-adder(name-1 $?n1)(name-2 $?n2)(carry 0)(#-1)(#-2)(result $?r))
  =>
  (retract ?f1) 
  (assert (binary-# (name { ?n1 + ?n2 }) (digits $?r) )))  
  
(defrule printout2
  (declare(salience -20))
  (phase add-binary-#)
  (binary-# (name  $?n ) (digits $?r))
  =>
  (printout t $?n ":" (implode$ $?r) crlf))   
  
  

  
  