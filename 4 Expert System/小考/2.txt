(deftemplate person (slot name)(slot sex))
(deftemplate parent-children (multislot parent)(multislot children))
(deftemplate pair (slot husband)(slot wife))
(deftemplate query (slot name)(slot subject))
(deffacts initial
   (person (name John)(sex male))
   (person (name Peter)(sex male))
   (person (name David)(sex male))
   (person (name Joe)(sex male))
   (person (name Kevin)(sex male))
   (person (name Mary)(sex female))
   (person (name Sue)(sex female))
   (person (name Linda)(sex female))
   (person (name Sherry)(sex female))
   (pair (husband John)(wife Sue))
   (pair (husband David)(wife Linda))
   (pair (husband Peter)(wife Sherry))
   (parent-children (parent John Sue)(children Mary Kevin))
   (parent-children (parent Peter Sherry)(children John Linda))
   (parent-children (parent David Lina)(children Joe))
   (query (name Mary)(subject Kevin))
   (query (name Sue)(subject Kevin))
   (query (name David)(subject Kevin))
   (query (name Linda)(subject Kevin))
   (query (name Joe)(subject Kevin))
   (query (name Peter)(subject Kevin))
 )


(defrule de-grandfa
  (query (name ?p1)(subject ?p2))
  (parent-children (parent  $? ?p3 $?) (children $? ?p2 $?))
  (parent-children (parent  $? ?p1 $?) (children $? ?p3 $?))
  (person (name ?p1)(sex male))
  =>
  (printout t ?p1 " is " ?p2 "'s grandfather." crlf))

(defrule de-uncle
  (query (name ?p1)(subject ?p2))
  (parent-children (parent  ?p3 $?) (children $? ?p2 $?))
  (parent-children (parent  ?p4 $?) (children ?p3 ?p5))
  (pair (husband ?p1) (wife ?p5))
  (person (name ?p1)(sex male))
  =>
  (printout t ?p1 " is " ?p2 "'s uncle." crlf))

(defrule de-aunt
  (query (name ?p1)(subject ?p2))
  (parent-children (parent  ?p3 $?) (children $? ?p2 $?))
  (parent-children (parent  ?p4 $?) (children ?p3 ?p1))
  (person (name ?p1)(sex female))
  =>
  (printout t ?p1 " is " ?p2 "'s aunt." crlf))

(defrule de-cousion
  (query (name ?p1)(subject ?p2))
  (parent-children (parent  ?p3 $?) (children  $? ?p2 $?))
  (parent-children (parent  ?p4 $?) (children  $? ?p3 $?))
  (parent-children (parent  ?p4  $?) (children $? ?p5  $?))
  (parent-children (parent  $? ?p5 $?) (children $? ?p1 $?))
  =>
  (printout t ?p1" is " ?p2 "'s cousion." crlf))






	

